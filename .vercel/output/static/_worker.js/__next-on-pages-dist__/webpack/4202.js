var g={},w=(b,p,h)=>(g.__chunk_4202=(R,D,m)=>{"use strict";m.d(D,{TQ:()=>f,cf:()=>o,ki:()=>l});class f{constructor(){this.db=null,typeof p<"u"&&p.DB&&(this.db=p.DB)}getDatabase(){if(!this.db)throw Error("D1 Database not available. Make sure you're running in Cloudflare Workers environment.");return this.db}async executeQuery(e,t=[]){try{let r=this.getDatabase().prepare(e),s=await r.bind(...t).all();return{success:!0,data:s.results,meta:s.meta}}catch(r){return console.error("D1 Query Error:",r),{success:!1,error:r instanceof Error?r.message:"Database query failed"}}}async executeQueryFirst(e,t=[]){try{return{success:!0,data:await this.getDatabase().prepare(e).bind(...t).first()}}catch(r){return console.error("D1 Query Error:",r),{success:!1,error:r instanceof Error?r.message:"Database query failed"}}}async executeTransaction(e){try{let t=this.getDatabase(),r=e.map(({query:c,params:u=[]})=>t.prepare(c).bind(...u));return{success:!0,results:(await t.batch(r)).map(c=>c.results)}}catch(t){return console.error("D1 Transaction Error:",t),{success:!1,error:t instanceof Error?t.message:"Database transaction failed"}}}async insertRecord(e,t){try{let r=Object.keys(t),s=r.map(()=>"?").join(", "),c=Object.values(t),u=`INSERT INTO ${e} (${r.join(", ")}) VALUES (${s})`,i=this.getDatabase(),n=await i.prepare(u).bind(...c).run();return n.success?{success:!0,id:t.id||n.meta.last_row_id?.toString()}:{success:!1,error:"Insert failed"}}catch(r){return console.error("D1 Insert Error:",r),{success:!1,error:r instanceof Error?r.message:"Insert failed"}}}async updateRecord(e,t,r){try{let s=Object.keys(r).map(d=>`${d} = ?`).join(", "),c=[...Object.values(r),t],u=`UPDATE ${e} SET ${s} WHERE id = ?`,i=this.getDatabase(),n=await i.prepare(u).bind(...c).run();return{success:n.success&&(n.meta.changes||0)>0}}catch(s){return console.error("D1 Update Error:",s),{success:!1,error:s instanceof Error?s.message:"Update failed"}}}async deleteRecord(e,t){try{let r=`DELETE FROM ${e} WHERE id = ?`,s=this.getDatabase(),c=await s.prepare(r).bind(t).run();return{success:c.success&&(c.meta.changes||0)>0}}catch(r){return console.error("D1 Delete Error:",r),{success:!1,error:r instanceof Error?r.message:"Delete failed"}}}async getRecords(e,t={}){try{let{where:r="",params:s=[],orderBy:c="created_at DESC",limit:u=50,offset:i=0}=t,n=`SELECT * FROM ${e}`,d=`SELECT COUNT(*) as total FROM ${e}`;r&&(n+=` WHERE ${r}`,d+=` WHERE ${r}`),n+=` ORDER BY ${c} LIMIT ${u} OFFSET ${i}`;let[E,y]=await Promise.all([this.executeQuery(n,s),this.executeQueryFirst(d,s)]);return!E.success||!y.success?{success:!1,error:E.error||y.error}:{success:!0,data:E.data,total:y.data?.total||0}}catch(r){return console.error("D1 Get Records Error:",r),{success:!1,error:r instanceof Error?r.message:"Get records failed"}}}async getRecordById(e,t){return this.executeQueryFirst(`SELECT * FROM ${e} WHERE id = ?`,[t])}isAvailable(){return this.db!==null}}let l=new f,o={generateId:()=>crypto.randomUUID(),toJson:a=>JSON.stringify(a),fromJson:a=>{if(!a)return null;try{return JSON.parse(a)}catch{return null}},formatDate:(a=new Date)=>a.toISOString(),generateSlug:a=>a.toLowerCase().trim().replace(/[^\w\s-]/g,"").replace(/[\s_-]+/g,"-").replace(/^-+|-+$/g,""),async getProductById(a){try{let e=await l.getRecordById("products",a);return e.success&&e.data?e.data:null}catch(e){return console.error("Error fetching product by ID:",e),null}},async updateProduct(a,e){try{let t={...e,updated_at:o.formatDate()};return e.images&&(t.images=o.toJson(e.images)),e.features&&(t.features=o.toJson(e.features)),e.applications&&(t.applications=o.toJson(e.applications)),e.specifications&&(t.specifications=o.toJson(e.specifications)),e.catalog_files&&(t.catalog_files=o.toJson(e.catalog_files)),(await l.updateRecord("products",a,t)).success?await o.getProductById(a):null}catch(t){return console.error("Error updating product:",t),null}},async deleteProduct(a){try{return(await l.deleteRecord("products",a)).success}catch(e){return console.error("Error deleting product:",e),!1}}}},g);export{w as __getNamedExports};
